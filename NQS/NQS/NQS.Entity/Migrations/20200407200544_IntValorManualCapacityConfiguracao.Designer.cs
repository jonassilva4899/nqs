// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Leega.Entity.Context;

namespace Leega.Entity.Migrations
{
    [DbContext(typeof(goobeeteamsContext))]
    [Migration("20200407200544_IntValorManualCapacityConfiguracao")]
    partial class IntValorManualCapacityConfiguracao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Leega.Entity.Acao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetalheAcao")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdPessoaCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdResponsavel")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeAcao")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaCriacao");

                    b.HasIndex("IdResponsavel");

                    b.ToTable("Acao");
                });

            modelBuilder.Entity("Leega.Entity.CapacityConfiguracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaminhoExcel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("ValorManual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTime")
                        .IsUnique();

                    b.ToTable("CapacityConfiguracoes");
                });

            modelBuilder.Entity("Leega.Entity.CapacityQuadro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCapacityConfiguracao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdCapacityConfiguracao");

                    b.HasIndex("IdQuadro")
                        .IsUnique();

                    b.ToTable("CapacityQuadros");
                });

            modelBuilder.Entity("Leega.Entity.CardEtiqueta", b =>
                {
                    b.Property<Guid>("IdColunaCard")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdEtiqueta")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCriacao")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdColunaCard", "IdEtiqueta");

                    b.HasIndex("IdEtiqueta");

                    b.ToTable("CardEtiquetas");
                });

            modelBuilder.Entity("Leega.Entity.CardLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataMovimentacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdColunaCard")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoaMoveu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadroColunaDe")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadroColunaPara")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdColunaCard");

                    b.HasIndex("IdPessoaMoveu");

                    b.HasIndex("IdQuadroColunaDe");

                    b.HasIndex("IdQuadroColunaPara");

                    b.ToTable("CardLogs");
                });

            modelBuilder.Entity("Leega.Entity.Categoria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Leega.Entity.Checkpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataAgendamento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdAnalista")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacoes")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SentimentoColaborador")
                        .HasColumnType("int");

                    b.Property<int>("SentimentoRhAgil")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdAnalista");

                    b.HasIndex("IdPessoa");

                    b.ToTable("Checkpoints");
                });

            modelBuilder.Entity("Leega.Entity.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Leega.Entity.ColunaCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<Guid?>("IdIteracao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadroColuna")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("MotivoBloqueio")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int?>("Pontuacao")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdIteracao");

                    b.HasIndex("IdProjeto");

                    b.HasIndex("IdQuadroColuna");

                    b.ToTable("ColunaCards");
                });

            modelBuilder.Entity("Leega.Entity.Configuracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Chave")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdTime");

                    b.ToTable("Configuracoes");
                });

            modelBuilder.Entity("Leega.Entity.Convite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoaCriada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoaCriada");

                    b.ToTable("Convites");
                });

            modelBuilder.Entity("Leega.Entity.ConviteHistorico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FoiEnviado")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdConvite")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoaRequisita")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MensagemNotificacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("MensagemResultadoNotificacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdConvite");

                    b.HasIndex("IdPessoaRequisita");

                    b.ToTable("ConvitesHistorico");
                });

            modelBuilder.Entity("Leega.Entity.Daily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataHoraRegistro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelRegistro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdResponsavelRegistro");

                    b.HasIndex("IdTime");

                    b.ToTable("Dailies");
                });

            modelBuilder.Entity("Leega.Entity.DailyConfiguracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("HorarioDaily")
                        .HasColumnType("VARCHAR(10)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdTime")
                        .IsUnique();

                    b.ToTable("DailyConfiguracoes");
                });

            modelBuilder.Entity("Leega.Entity.DelegationBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDominio")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdSupervisor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NivelAutoridade")
                        .HasColumnType("int");

                    b.Property<string>("Observacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdDominio");

                    b.HasIndex("IdResponsavelTime");

                    b.HasIndex("IdSupervisor");

                    b.HasIndex("IdTime");

                    b.ToTable("DelegationBoards");
                });

            modelBuilder.Entity("Leega.Entity.DicaAgileCoach", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tema")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("DicasAgileCoach");
                });

            modelBuilder.Entity("Leega.Entity.DicaAgileCoachCategoria", b =>
                {
                    b.Property<Guid>("IdDicaAgileCoach")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdDicaAgileCoach", "IdCategoria");

                    b.HasIndex("IdCategoria");

                    b.ToTable("DicaAgileCoachCategorias");
                });

            modelBuilder.Entity("Leega.Entity.Dominio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Dominios");
                });

            modelBuilder.Entity("Leega.Entity.Entity.Organizacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localizacao")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Organizacoes");
                });

            modelBuilder.Entity("Leega.Entity.Entity.OrganizacaoPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganizacao");

                    b.HasIndex("IdPessoa");

                    b.ToTable("OrganizacaoPessoas");
                });

            modelBuilder.Entity("Leega.Entity.Etiqueta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Etiquetas");
                });

            modelBuilder.Entity("Leega.Entity.Habilidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("Leega.Entity.Indicador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaminhoExcel")
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExibeDashPratica")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Tipo")
                        .HasColumnType("int");

                    b.Property<int?>("TipoCalculo")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ValorOpcionalDois")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ValorOpcionalUm")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ValorPrincipal")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdTime");

                    b.ToTable("Indicadores");
                });

            modelBuilder.Entity("Leega.Entity.Iteracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Iteracoes");
                });

            modelBuilder.Entity("Leega.Entity.MelhoriaContinua", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Competencia")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelMelhoriaContinua")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Origem")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdResponsavelMelhoriaContinua");

                    b.HasIndex("IdTime");

                    b.ToTable("MelhoriasContinuas");
                });

            modelBuilder.Entity("Leega.Entity.Motivador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Motivadores");
                });

            modelBuilder.Entity("Leega.Entity.MovimentoConfiguracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaminhoExcel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.Property<string>("ValorManual")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdTime")
                        .IsUnique();

                    b.ToTable("MovimentoConfiguracoes");
                });

            modelBuilder.Entity("Leega.Entity.MovimentoQuadro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdMovimentoConfiguracao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdMovimentoConfiguracao");

                    b.HasIndex("IdQuadro")
                        .IsUnique();

                    b.ToTable("MovimentoQuadros");
                });

            modelBuilder.Entity("Leega.Entity.Notificacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ConfirmacaoLeitura")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnviadoPorEmail")
                        .HasColumnType("bit");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mensagem")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Tipo")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<string>("Titulo")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("Leega.Entity.NotificacaoUsuario", b =>
                {
                    b.Property<Guid>("IdNotificacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdNotificacao", "IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("NotificacaoUsuarios");
                });

            modelBuilder.Entity("Leega.Entity.PersonalMappingItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPersonalMappingTitulo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Item")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdPersonalMappingTitulo");

                    b.ToTable("PersonalMappingItens");
                });

            modelBuilder.Entity("Leega.Entity.PersonalMappingTitulo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Titulo")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa");

                    b.ToTable("PersonalMappingTitulos");
                });

            modelBuilder.Entity("Leega.Entity.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuncaoPrincipal")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("MiniBio")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefone")
                        .HasColumnType("VARCHAR(20)");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");
                });

            modelBuilder.Entity("Leega.Entity.PessoaCliente", b =>
                {
                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdPessoa", "IdCliente");

                    b.HasIndex("IdCliente");

                    b.ToTable("PessoaClientes");
                });

            modelBuilder.Entity("Leega.Entity.PessoaHabilidade", b =>
                {
                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdHabilidade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPessoa", "IdHabilidade");

                    b.HasIndex("IdHabilidade");

                    b.ToTable("PessoaHabilidades");
                });

            modelBuilder.Entity("Leega.Entity.PessoaMotivador", b =>
                {
                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdMotivador")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPessoa", "IdMotivador");

                    b.HasIndex("IdMotivador");

                    b.ToTable("PessoaMotivadores");
                });

            modelBuilder.Entity("Leega.Entity.Planning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataHoraRegistro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelRegistro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTecnicaUtilizada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdResponsavelRegistro");

                    b.HasIndex("IdTecnicaUtilizada");

                    b.HasIndex("IdTime");

                    b.ToTable("Plannings");
                });

            modelBuilder.Entity("Leega.Entity.PlanningConfiguracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrecursora")
                        .HasColumnType("datetime2");

                    b.Property<string>("HorarioPlanning")
                        .HasColumnType("VARCHAR(5)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProximaData")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UltimaData")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdTime")
                        .IsUnique();

                    b.ToTable("PlanningConfiguracoes");
                });

            modelBuilder.Entity("Leega.Entity.PraticaAgil", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Chave")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("PraticasAgeis");
                });

            modelBuilder.Entity("Leega.Entity.PraticaAgilTime", b =>
                {
                    b.Property<Guid>("IdPraticaAgil")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Engajamento")
                        .HasColumnType("int");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdPraticaAgil", "IdTime");

                    b.HasIndex("IdTime");

                    b.ToTable("PraticasAgeisTimes");
                });

            modelBuilder.Entity("Leega.Entity.Projeto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoriaProjeto")
                        .HasColumnType("int");

                    b.Property<double>("Custo")
                        .HasColumnType("float");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryProjeto")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int>("Esforco")
                        .HasColumnType("int");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelComercial")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<double>("Receita")
                        .HasColumnType("float");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StatusProjeto")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdResponsavelComercial");

                    b.ToTable("Projetos");
                });

            modelBuilder.Entity("Leega.Entity.Quadro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdTime");

                    b.ToTable("Quadros");
                });

            modelBuilder.Entity("Leega.Entity.QuadroColuna", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TipoColuna")
                        .HasColumnType("int");

                    b.Property<int>("WipLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdQuadro");

                    b.HasIndex("TipoColuna")
                        .IsUnique()
                        .HasFilter("[TipoColuna] IS NOT NULL");

                    b.ToTable("QuadroColunas");
                });

            modelBuilder.Entity("Leega.Entity.RecuperarSenha", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MensagemResultadoNotificacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<bool>("NotificacaoFoiEnviada")
                        .HasColumnType("bit");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa");

                    b.ToTable("RecuperarSenhas");
                });

            modelBuilder.Entity("Leega.Entity.ResponsavelCard", b =>
                {
                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdColunaCard")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPessoa", "IdColunaCard");

                    b.HasIndex("IdColunaCard");

                    b.ToTable("ResponsavelCards");
                });

            modelBuilder.Entity("Leega.Entity.ResponsavelProjeto", b =>
                {
                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdPessoa", "IdProjeto");

                    b.HasIndex("IdProjeto");

                    b.ToTable("ResponsavelProjetos");
                });

            modelBuilder.Entity("Leega.Entity.Retrospectiva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataHoraRegistro")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdResponsavelRegistro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTecnicaUtilizada")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observacao")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdResponsavelRegistro");

                    b.HasIndex("IdTecnicaUtilizada");

                    b.HasIndex("IdTime");

                    b.ToTable("Retrospectiva");
                });

            modelBuilder.Entity("Leega.Entity.RetrospectivaConfiguracao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrecursora")
                        .HasColumnType("datetime2");

                    b.Property<string>("HorarioRetrospectiva")
                        .HasColumnType("VARCHAR(5)");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ProximaData")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UltimaData")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdTime")
                        .IsUnique();

                    b.ToTable("RetrospectivaConfiguracao");
                });

            modelBuilder.Entity("Leega.Entity.Seguidor", b =>
                {
                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSeguir")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTime", "IdUsuario");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Seguidores");
                });

            modelBuilder.Entity("Leega.Entity.SentimentoPessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataRealizacao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sentimento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa");

                    b.ToTable("SentimentosPessoas");
                });

            modelBuilder.Entity("Leega.Entity.TecnicaPlanning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TecnicasPlannings");
                });

            modelBuilder.Entity("Leega.Entity.TecnicaRestrospectiva", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("TecnicaRestrospectiva");
                });

            modelBuilder.Entity("Leega.Entity.Throughput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomeArquivoPlainlha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdTime");

                    b.ToTable("Throughputs");
                });

            modelBuilder.Entity("Leega.Entity.ThroughputManual", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataMes")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdThroughput")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdThroughput");

                    b.ToTable("ThroughputManuais");
                });

            modelBuilder.Entity("Leega.Entity.ThroughputQuadro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdQuadro")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdThroughput")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdQuadro");

                    b.HasIndex("IdThroughput");

                    b.ToTable("ThroughputQuadros");
                });

            modelBuilder.Entity("Leega.Entity.Time", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("BioTime")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Localizacao")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Proposito")
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Valores")
                        .HasColumnType("VARCHAR(1000)");

                    b.HasKey("Id");

                    b.ToTable("Times");
                });

            modelBuilder.Entity("Leega.Entity.TimeDicaAgileCoach", b =>
                {
                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdDicaAgileCoach")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEnvioDica")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StatusDica")
                        .HasColumnType("int");

                    b.HasKey("IdTime", "IdDicaAgileCoach");

                    b.HasIndex("IdDicaAgileCoach");

                    b.ToTable("TimeDicasAgileCoach");
                });

            modelBuilder.Entity("Leega.Entity.TimePessoa", b =>
                {
                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Papel")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("IdTime", "IdPessoa");

                    b.HasIndex("IdPessoa");

                    b.ToTable("TimePessoas");
                });

            modelBuilder.Entity("Leega.Entity.TimeProjeto", b =>
                {
                    b.Property<Guid>("IdTime")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProjeto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdOrganizacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdTime", "IdProjeto");

                    b.HasIndex("IdProjeto");

                    b.ToTable("TimeProjetos");
                });

            modelBuilder.Entity("Leega.Entity.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEdicao")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid>("ResponsavelCriacao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResponsavelEdicao")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Senha")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Leega.Entity.Acao", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "PessoaCriacao")
                        .WithMany("AcoesPessoa")
                        .HasForeignKey("IdPessoaCriacao");

                    b.HasOne("Leega.Entity.Pessoa", "Responsavel")
                        .WithMany("AcoesResponsavel")
                        .HasForeignKey("IdResponsavel")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Leega.Entity.CapacityConfiguracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithOne("CapacityConfiguracao")
                        .HasForeignKey("Leega.Entity.CapacityConfiguracao", "IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.CapacityQuadro", b =>
                {
                    b.HasOne("Leega.Entity.CapacityConfiguracao", "CapacityConfiguracao")
                        .WithMany("CapacityQuadros")
                        .HasForeignKey("IdCapacityConfiguracao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Quadro", "Quadro")
                        .WithOne("CapacityQuadro")
                        .HasForeignKey("Leega.Entity.CapacityQuadro", "IdQuadro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.CardEtiqueta", b =>
                {
                    b.HasOne("Leega.Entity.ColunaCard", "ColunaCard")
                        .WithMany("CardEtiquetas")
                        .HasForeignKey("IdColunaCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Etiqueta", "Etiqueta")
                        .WithMany("CardEtiquetas")
                        .HasForeignKey("IdEtiqueta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.CardLog", b =>
                {
                    b.HasOne("Leega.Entity.ColunaCard", "ColunaCard")
                        .WithMany("CardLogs")
                        .HasForeignKey("IdColunaCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "PessoaMoveu")
                        .WithMany("CardMovidos")
                        .HasForeignKey("IdPessoaMoveu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.QuadroColuna", "QuadroColunaDe")
                        .WithMany("CardMovidosDe")
                        .HasForeignKey("IdQuadroColunaDe")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leega.Entity.QuadroColuna", "QuadroColunaPara")
                        .WithMany("CardMovidosPara")
                        .HasForeignKey("IdQuadroColunaPara")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Checkpoint", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Analista")
                        .WithMany("AnalistaCheckpoints")
                        .HasForeignKey("IdAnalista")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaCheckpoints")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ColunaCard", b =>
                {
                    b.HasOne("Leega.Entity.Iteracao", "Iteracao")
                        .WithMany("ColunaCards")
                        .HasForeignKey("IdIteracao");

                    b.HasOne("Leega.Entity.Projeto", "Projeto")
                        .WithMany("ColunaCards")
                        .HasForeignKey("IdProjeto");

                    b.HasOne("Leega.Entity.QuadroColuna", "QuadroColuna")
                        .WithMany("ColunaCards")
                        .HasForeignKey("IdQuadroColuna")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Configuracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Configuracoes")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Convite", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "PessoaCriada")
                        .WithMany("Convites")
                        .HasForeignKey("IdPessoaCriada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ConviteHistorico", b =>
                {
                    b.HasOne("Leega.Entity.Convite", "Convite")
                        .WithMany("ConvitesHistorico")
                        .HasForeignKey("IdConvite")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "PessoaRequisita")
                        .WithMany("ConvitesHistorico")
                        .HasForeignKey("IdPessoaRequisita")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Daily", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelRegistro")
                        .WithMany("DailiesRegistradas")
                        .HasForeignKey("IdResponsavelRegistro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Dailies")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.DailyConfiguracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithOne("DailyConfiguracao")
                        .HasForeignKey("Leega.Entity.DailyConfiguracao", "IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.DelegationBoard", b =>
                {
                    b.HasOne("Leega.Entity.Dominio", "Dominio")
                        .WithMany("DelegationBoards")
                        .HasForeignKey("IdDominio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelTime")
                        .WithMany("DelegationBoardsResponsavel")
                        .HasForeignKey("IdResponsavelTime")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Supervisor")
                        .WithMany("DelegationBoardsSupervisor")
                        .HasForeignKey("IdSupervisor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("DelegationBoards")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.DicaAgileCoachCategoria", b =>
                {
                    b.HasOne("Leega.Entity.Categoria", "Categoria")
                        .WithMany("DicaAgileCoachCategorias")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.DicaAgileCoach", "DicaAgileCoach")
                        .WithMany("DicaAgileCoachCategorias")
                        .HasForeignKey("IdDicaAgileCoach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Entity.OrganizacaoPessoa", b =>
                {
                    b.HasOne("Leega.Entity.Entity.Organizacao", "Organizacao")
                        .WithMany("Pessoas")
                        .HasForeignKey("IdOrganizacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("Organizacoes")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Indicador", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Indicadores")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.MelhoriaContinua", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelMelhoriaContinua")
                        .WithMany("MelhoriasContinuas")
                        .HasForeignKey("IdResponsavelMelhoriaContinua")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("MelhoriasContinuas")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.MovimentoConfiguracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithOne("MovimentoConfiguracao")
                        .HasForeignKey("Leega.Entity.MovimentoConfiguracao", "IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.MovimentoQuadro", b =>
                {
                    b.HasOne("Leega.Entity.MovimentoConfiguracao", "MovimentoConfiguracao")
                        .WithMany("MovimentoQuadros")
                        .HasForeignKey("IdMovimentoConfiguracao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Quadro", "Quadro")
                        .WithOne("MovimentoQuadro")
                        .HasForeignKey("Leega.Entity.MovimentoQuadro", "IdQuadro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.NotificacaoUsuario", b =>
                {
                    b.HasOne("Leega.Entity.Notificacao", "Notificacao")
                        .WithMany("NotificacaoUsuarios")
                        .HasForeignKey("IdNotificacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Usuario", "Usuario")
                        .WithMany("NotificacaoUsuarios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PersonalMappingItem", b =>
                {
                    b.HasOne("Leega.Entity.PersonalMappingTitulo", "PersonalMappingTitulo")
                        .WithMany("PersonalMappingItens")
                        .HasForeignKey("IdPersonalMappingTitulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PersonalMappingTitulo", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("PersonalMappingTitulos")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PessoaCliente", b =>
                {
                    b.HasOne("Leega.Entity.Cliente", "Cliente")
                        .WithMany("PessoaClientes")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaClientes")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PessoaHabilidade", b =>
                {
                    b.HasOne("Leega.Entity.Habilidade", "Habilidade")
                        .WithMany("PessoaHabilidades")
                        .HasForeignKey("IdHabilidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaHabilidades")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PessoaMotivador", b =>
                {
                    b.HasOne("Leega.Entity.Motivador", "Motivador")
                        .WithMany("PessoaMotivadores")
                        .HasForeignKey("IdMotivador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("PessoaMotivadores")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Planning", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelRegistro")
                        .WithMany("PlanningsRegistradas")
                        .HasForeignKey("IdResponsavelRegistro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.TecnicaPlanning", "TecnicaUtilizada")
                        .WithMany("Plannings")
                        .HasForeignKey("IdTecnicaUtilizada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Plannings")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PlanningConfiguracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithOne("PlanningConfiguracao")
                        .HasForeignKey("Leega.Entity.PlanningConfiguracao", "IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.PraticaAgilTime", b =>
                {
                    b.HasOne("Leega.Entity.PraticaAgil", "PraticaAgil")
                        .WithMany("PraticaAgilTimes")
                        .HasForeignKey("IdPraticaAgil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("PraticaAgilTimes")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Projeto", b =>
                {
                    b.HasOne("Leega.Entity.Cliente", "Cliente")
                        .WithMany("Projetos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelComercial")
                        .WithMany("ResponsaveisComercial")
                        .HasForeignKey("IdResponsavelComercial")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Quadro", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Quadros")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.QuadroColuna", b =>
                {
                    b.HasOne("Leega.Entity.Quadro", "Quadro")
                        .WithMany("QuadroColunas")
                        .HasForeignKey("IdQuadro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.RecuperarSenha", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("RecuperarSenhas")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ResponsavelCard", b =>
                {
                    b.HasOne("Leega.Entity.ColunaCard", "ColunaCard")
                        .WithMany("ResponsavelCards")
                        .HasForeignKey("IdColunaCard")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("ResponsavelCards")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ResponsavelProjeto", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("ResponsavelProjetos")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Projeto", "Projeto")
                        .WithMany("ResponsavelProjetos")
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Retrospectiva", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "ResponsavelRegistro")
                        .WithMany("RetrospectivasRegistradas")
                        .HasForeignKey("IdResponsavelRegistro")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.TecnicaRestrospectiva", "TecnicaUtilizada")
                        .WithMany("Retrospectivas")
                        .HasForeignKey("IdTecnicaUtilizada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Retrospectivas")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.RetrospectivaConfiguracao", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithOne("RetrospectivaConfiguracao")
                        .HasForeignKey("Leega.Entity.RetrospectivaConfiguracao", "IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Seguidor", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("Seguidores")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Usuario", "Usuario")
                        .WithMany("Seguidores")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.SentimentoPessoa", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("SentimentosPessoa")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Throughput", b =>
                {
                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany()
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ThroughputManual", b =>
                {
                    b.HasOne("Leega.Entity.Throughput", "Throughput")
                        .WithMany("ValorManualMes")
                        .HasForeignKey("IdThroughput")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.ThroughputQuadro", b =>
                {
                    b.HasOne("Leega.Entity.Quadro", "Quadro")
                        .WithMany()
                        .HasForeignKey("IdQuadro")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Throughput", "Throughput")
                        .WithMany("ThroughputQuadro")
                        .HasForeignKey("IdThroughput")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.TimeDicaAgileCoach", b =>
                {
                    b.HasOne("Leega.Entity.DicaAgileCoach", "DicaAgileCoach")
                        .WithMany("TimeDicasAgileCoach")
                        .HasForeignKey("IdDicaAgileCoach")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("TimeDicasAgileCoach")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.TimePessoa", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithMany("TimePessoas")
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("TimePessoas")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.TimeProjeto", b =>
                {
                    b.HasOne("Leega.Entity.Projeto", "Projeto")
                        .WithMany("TimeProjetos")
                        .HasForeignKey("IdProjeto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leega.Entity.Time", "Time")
                        .WithMany("TimeProjetos")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leega.Entity.Usuario", b =>
                {
                    b.HasOne("Leega.Entity.Pessoa", "Pessoa")
                        .WithOne("Usuario")
                        .HasForeignKey("Leega.Entity.Usuario", "IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
